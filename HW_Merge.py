# Итеративная сортировка слиянием начинает с объединения небольших подмассивов
# и постепенно расширяет размер объединяемых блоков
def merge(left, right):
    result = []
    i = j = 0

    # Слияние двух подмассивов в один
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    # Добавляем оставшиеся элементы
    result.extend(left[i:])
    result.extend(right[j:])
    return result

def merge_sort_iterative(arr):
    # **Инициализация**: Начнем с выбора ширины (размера) подмассивов, которые мы будем сливать. Изначально ширина равна 1,
    #                   то есть мы рассматриваем каждый элемент массива как отдельный подмассив.    #
    width = 1
    n = len(arr)
    while width < n:
        # **Проход по массиву**: Для каждой итерации по массиву:
        #                       - Мы берем пары подмассивов заданной ширины.
        #                       - Сливаем их в один отсортированный подмассив.
        for i in range(0, n, 2 * width):
            left = arr[i:i + width]
            right = arr[i + width:i + 2 * width]
            arr[i:i + 2 * width] = merge(left, right)
        # **Увеличение ширины**: После каждого полного прохода по массиву мы увеличиваем ширину подмассивов в два раза
        #                       и повторяем процесс, пока ширина не станет больше или равна длине массива.
        width *= 2
    return arr


arr = [38, 27, 43, 3, 9, 82, 10]
sorted_arr = merge_sort_iterative(arr)
print("Отсортированный массив:", sorted_arr)
